# Bootstrap State Infrastructure
# Purpose: Minimal infrastructure for Terraform state backend
# Creates: k3s + MinIO + PostgreSQL for state storage

terraform {
  required_version = ">= 1.0"

  # Backend configuration for remote state
  # When migrating, use: terraform init -migrate-state -backend-config=backend-remote.hcl
  backend "s3" {
    # Configuration will be provided via backend config file
    # This enables remote state migration
  }

  required_providers {
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.0"
    }
    helm = {
      source  = "hashicorp/helm"
      version = "~> 2.0"
    }
    null = {
      source  = "hashicorp/null"
      version = "~> 3.0"
    }
  }
}

# k3s installation (minimal bootstrap)
resource "null_resource" "k3s_install" {
  provisioner "local-exec" {
    command = <<-EOT
      if ! command -v k3s >/dev/null 2>&1; then
        curl -sfL https://get.k3s.io | sh -
        sudo chmod 644 /etc/rancher/k3s/k3s.yaml
      fi
    EOT
  }
}

# Bootstrap namespace
resource "kubernetes_namespace" "bootstrap" {
  metadata {
    name = "bootstrap"
  }
  depends_on = [null_resource.k3s_install]
}

# MinIO credentials are generated by bootstrap script
# and passed as variables to this Terraform configuration

# MinIO for Terraform state storage
resource "helm_release" "bootstrap_minio" {
  name       = "bootstrap-minio"
  repository = "https://charts.min.io/"
  chart      = "minio"
  namespace  = "bootstrap"
  version    = "5.0.15"

  create_namespace = true

  values = [yamlencode({
    mode = var.environment == "homelab" ? "standalone" : "distributed"
    replicas = var.environment == "homelab" ? 1 : 4
    auth = {
      rootUser     = var.minio_access_key
      rootPassword = var.minio_secret_key
    }
    defaultBuckets = "terraform-state,vault-storage,vault-backups"
    persistence = {
      enabled      = true
      size         = var.minio_storage_size
      storageClass = "local-path"
    }
    service = {
      type = "ClusterIP"
      ports = {
        api     = 9000
        console = 9001
      }
    }
    resources = {
      requests = {
        memory = "256Mi"
        cpu    = "100m"
      }
      limits = {
        memory = "512Mi"
        cpu    = "500m"
      }
    }
  })]

  depends_on = [kubernetes_namespace.bootstrap]
}

# PostgreSQL for state locking (ARM64 compatible)
resource "helm_release" "bootstrap_postgresql" {
  name       = "bootstrap-postgresql"
  repository = "https://charts.bitnami.com/bitnami"
  chart      = "postgresql"
  namespace  = "bootstrap"
  version    = "13.2.24"

  create_namespace = true

  values = [yamlencode({
    image = {
      repository = "postgres"
      tag        = "latest"
    }
    auth = {
      postgresPassword = "postgres123"
      database         = "terraform_locks"
    }
    primary = {
      persistence = {
        enabled      = true
        size         = "8Gi"
        storageClass = "local-path"
      }
      resources = {
        requests = {
          memory = "256Mi"
          cpu    = "100m"
        }
        limits = {
          memory = "512Mi"
          cpu    = "250m"
        }
      }
    }
  })]

  depends_on = [kubernetes_namespace.bootstrap]
}
# Vault namespace
resource "kubernetes_namespace" "vault" {
  metadata {
    name = "vault"
  }
}

# Vault deployment via Helm
resource "helm_release" "vault" {
  name       = "vault"
  repository = "https://helm.releases.hashicorp.com"
  chart      = "vault"
  namespace  = "vault"
  version    = "0.25.0"

  create_namespace = false

  values = [yamlencode({
    global = {
      enabled = true
    }
    server = {
      image = {
        repository = "hashicorp/vault"
        tag        = "1.15.2"
        pullPolicy = "IfNotPresent"
      }
      resources = {
        requests = {
          memory = "256Mi"
          cpu    = "100m"
        }
        limits = {
          memory = "512Mi"
          cpu    = "500m"
        }
      }
      readinessProbe = {
        enabled = true
        path    = "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
      }
      livenessProbe = {
        enabled = true
        path    = "/v1/sys/health?standbyok=true"
        initialDelaySeconds = 60
      }
      extraEnvironmentVars = {
        VAULT_ADDR = "http://127.0.0.1:8200"
        VAULT_API_ADDR = "http://127.0.0.1:8200"
      }
      standalone = {
        enabled = true
        config = <<-EOT
          ui = true
          
          listener "tcp" {
            tls_disable = 1
            address = "[::]:8200"
            cluster_address = "[::]:8201"
          }
          
          storage "file" {
            path = "/vault/data"
          }
          
          api_addr = "http://127.0.0.1:8200"
          cluster_addr = "http://127.0.0.1:8201"
          EOT
      }
      service = {
        enabled = true
        type = "ClusterIP"
        port = 8200
        targetPort = 8200
      }
      dataStorage = {
        enabled = true
        size = "1Gi"
        storageClass = "local-path"
      }
    }
    ui = {
      enabled = true
      serviceType = "ClusterIP"
    }
  })]

  depends_on = [kubernetes_namespace.vault]
}
